generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMINISTRATOR
  SALES_MANAGEMENT
  SALES
  PROVIDER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
  DELETEED
}

model User {
  id           BigInt     @id @default(autoincrement()) @map("user_id")
  name         String     @db.VarChar(20)
  email        String     @unique @db.VarChar(100)
  phone        String     @db.VarChar(50)
  password     String     @db.VarChar(255)
  status       UserStatus
  refreshToken String?    @map("refresh_token") @db.VarChar(500)

  roleId    BigInt   @map("role_id")
  createdBy String   @default("SYSTEM") @map("created_by")
  updatedBy String   @default("SYSTEM") @map("updated_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  role Role @relation(fields: [roleId], references: [id])

  @@map("user")
}

model Role {
  id          BigInt   @id @default(autoincrement()) @map("role_id")
  roleType    RoleType @unique @map("role_type")
  description String   @db.VarChar(50)

  createdBy String   @default("SYSTEM") @map("created_by")
  updatedBy String   @default("SYSTEM") @map("updated_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  users        User[]
  roleMenu     RoleMenu[]
  RoleFunction RoleFunction[]

  @@map("role")
}

model RoleMenu {
  id     BigInt @id @default(autoincrement()) @map("role_menu_id")
  roleId BigInt @map("role_id")
  menuId BigInt @map("menu_id")

  createdBy String   @default("SYSTEM") @map("created_by")
  updatedBy String   @default("SYSTEM") @map("updated_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@unique([roleId, menuId]) // 같은 Role과 Menu 조합이 중복되지 않도록 보장
  @@map("role_menu")
}

model Menu {
  id    BigInt @id @default(autoincrement()) @map("menu_id")
  name  String @map("menu_name") @db.VarChar(20)
  url   String @map("menu_url") @db.VarChar(100)
  depth Int    @map("menu_depth")

  createdBy String   @default("SYSTEM") @map("created_by")
  updatedBy String   @default("SYSTEM") @map("updated_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  roleMenu RoleMenu[]

  @@map("menu")
}

model RoleFunction {
  id         BigInt @id @default(autoincrement()) @map("role_fuction_id")
  roleId     BigInt @map("role_id")
  funcitonId BigInt @map("function_id")

  createdBy String   @default("SYSTEM") @map("created_by")
  updatedBy String   @default("SYSTEM") @map("updated_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  role     Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  function Function @relation(fields: [funcitonId], references: [id], onDelete: Cascade)

  @@unique([roleId, funcitonId])
  @@map("role_function")
}

model Function {
  id          BigInt @id @default(autoincrement()) @map("function_id")
  name        String @map("function_name") @db.VarChar(20)
  description String @db.VarChar(200)

  createdBy String   @default("SYSTEM") @map("created_by")
  updatedBy String   @default("SYSTEM") @map("updated_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  roleFunction RoleFunction[]

  @@map("function")
}
